spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirectUri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - email
              - profile
          vk:
            client-id: ${VK_CLIENT_ID}
            client-secret: ${VK_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope: email
        provider:
          vk:
#            revoke=1 needs to always show vk dialog
            authorization-uri: https://oauth.vk.com/authorize?revoke=1
            token-uri: https://oauth.vk.com/access_token
            user-info-uri: https://api.vk.com/method/users.get?v=5.81&fields=photo_max
            user-name-attribute: id
  datasource:
    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5432/postgres}
    driver-class-name: org.postgresql.Driver
    username: ${DB_NAME:postgres}
    password: ${DB_PASSWORD:postgres}

  jpa:
    hibernate:
      ddl-auto: create

local:
  auth:
    token-exp-time: 800000
    secret-key: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
#logging:
#  level:
#    root: debug
